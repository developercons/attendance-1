server.port=8888

#============ mybatis配置 ====================================
#起别名。可省略写mybatis的xml中的resultType的全路径
mybatis.type-aliases-package=com.yunhuakeji.attendance.dao.entity
#Mybatis扫描(配置xml模式使用)
mybatis.mapper-locations=classpath*:mapper/*.xml


#==================== 日志配合・标准  ============================
logging.config=classpath:logback-boot.xml


# 数据库访问配置
# 主数据源，默认的
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
spring.datasource.url=jdbc:oracle:thin:@localhost:1522:orcl
spring.datasource.username=root
spring.datasource.password=123456

# 基础数据数据源
baseData.datasource.type=com.alibaba.druid.pool.DruidDataSource
baseData.datasource.driver-class-name=oracle.jdbc.driver.OracleDriver
baseData.datasource.url=jdbc:oracle:thin:@localhost:1522:orcl
baseData.datasource.username=root
baseData.datasource.password=123456

# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=20
# 配置获取连接等待超时的时间
spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
spring.datasource.filters=stat,wall
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
#标记是否删除泄露的连接
spring.datasource.removeAbandoned=false
spring.datasource.removeAbandonedTimeout=20000
#标记当Statement或连接被泄露时是否打印程序的stack traces日志。被泄露的Statements和连接的日志添加在每个连接打开或者生成新的Statement,因为需要生成stack trace。
spring.datasource.logAbandoned=true
# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat=true